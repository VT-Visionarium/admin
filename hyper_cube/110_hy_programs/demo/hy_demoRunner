#!/bin/bash

######################################
# defaults
######################################

root=/home/demo
host=cube.sv.vt.edu
rhost=$(hostname)
mono=
run_stop=" --on_exit hy_stop"
just_server=

port=8383

######################################

function usage()
{
    cat << EOF

  Usage: $(basename $0) [SERVER_HOST][-m|--mono][--no-stop][--just-server]\
      [--with-term [args ...]]|[-h|--help]

  Run the hyperCube demoRunner web server.  This will not start the X11
  window server or turn on the projectors.  There will be widgets in the
  launcher web page that can do that.


          OPTIONS


    -h|--help        Print this help and exit
    
    --just-server    Just run the demoRunner server

    -m|--mono        Run programs with mono visuals (not stereo)

    --no-stop        Don't run hy_stop after quiting.  hy_stop stops the
                     X session and turns off projects.

    --with-term      Run this program in a xfce4-terminal with the
                     remaining arguments passed to xfce4-terminal

    SERVER_HOST      Run the nodejs demoRunner server on SERVER_HOST.
                     That's for testing.

EOF

    exit 1
}

passcode=$(openssl rand -hex 2)


function catch()
{
    echo "caught signal, sending QUIT request"
    set -x
    # We tell the server with this passcode to QUIT.
    if ! wget --no-check-certificate --timeout=5 --tries=1\
 https://$host:$port/QUIT?passcode=${passcode}\
 -O - > /dev/null ; then
        exit
    fi
    set +x
    # That should tell the server to quit
    # If that failed, too bad.
}


function runServer()
{
    local heading="HyperCube Demos in stereo"

    env_opts=" "

    if [ -n "$mono" ] ; then
        env_opts=" INSTANTPLAYER_CAVE_OPTIONS=--mono HYPERCUBE_OPTIONS=--mono"
        heading="HyperCube Demos in mono"
    fi

    local exe=

    if [ -n "$just_server" ] ; then
        exe="exec "
    fi

    if [ "$rhost" != "$host" ] ; then
        exe="$exe ssh $host -X"
        heading="\"$heading\""
    fi

    set -x
    if ! ${exe}${env_opts}\
 webLauncher --root_dir $root\
 --title Demos\
 --exit_on_last 6000\
 --https_port $port\
 --kill_children\
${run_stop}\
 --passcode $passcode\
 --catch_signal SIGINT\
 --heading "$heading" ; then
        exit 1
    fi
    set +x
}


script_args=

while [ -n "$1" ] ; do
    if [ "$1" != "--with-term" ] ; then
        script_args="$script_args $1"
    fi
    case "$1" in
        --no-stop)
            run_stop=
            ;;
        --just-server)
            just_server=yes
            ;;
        -m*|--m*)
            mono=--mono
            ;;
        --with-term)
            shift 1
            # rerun in a terminal
            set -x
            exec xfce4-terminal --geometry 100x32-0+0 -e "$0 $script_args $*"
            ;;
        -*)
            usage
            ;;
        *)
            host=$1
            ;;
    esac
    shift 1
done

echo "host=$host rhost=$rhost"


if [ "$host" != "$rhost" ] ; then
    if ! hy_pushSshKeys $host ; then
        echo
        echo "FAILED to check ssh keys"
        echo
        exit 1
    fi
fi

set -x
# netcat with timeout 2 seconds
if nc -z -w 2 $host $port ; then
    # If there is an old server running tell it to quit.
    ssh $host wget --timeout=5 --tries=1\
 http://localhost:8080/QUIT?foo=bar -O -
    sleep 1.5
    while nc -z -w 2 $host $port ; do
        set +x
        echo "waiting for old server to shutdown"
        sleep 1.5
    done
fi
set +x

if [ -n "$just_server" ] ; then
    runServer
    exit 1
fi


runServer &

waitPid=$!


count=0

# This sleep may help get the web server going.
sleep 0.4

# wait for server to be working via a wget request
# We tried netcat but that was connecting before
# the server was working.
set -x
while ! wget --no-check-certificate --timeout=5 --tries=1\
 https://$host:$port/?passcode=${passcode}\
 -O - > /dev/null ; do
    set +x
    echo "waiting for server to start"
    sleep 1
    let count=$count+1
    if [ "$count" = "20" ] ; then
        echo "Failed to connect to server"
        sleep 10
        exit 1
    fi
    set -x
done
set +x

echo "server is running"

# We wish to have signal control of the server

trap catch SIGINT SIGTERM SIGQUIT

echo "passcode=$passcode"



set -x
# -no-remote option is broken
#firefox -no-remote https://$host:$port/?passcode=${passcode} &
xdg-open https://$host:$port/?passcode=${passcode} &
set +x


while wait $waitPid ; do
    # Getting a PID to wait on was a problem.
    # If the server is not running exit
    # BUG: If a dumb user start again after quiting
    # then the previous version will keep running
    # in this loop.
    # TODO: make a less expensive wget ping
    # this gets many files.
    if ! wget --no-check-certificate --timeout=1 --tries=1\
 https://$host:$port/?passcode=${passcode} -O - > /dev/null ; then
        echo "Server is unreachable"
        sleep 5 # let the user see the spew
        break
    fi
done

# We keep this script from killing the browser.
# Stupid xdg-open sees it's parent is gone and
# kills the browser.
while true ; do sleep 100 ; done

