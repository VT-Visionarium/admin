#!/bin/bash

set -e

magic_arg=--hy_start_X11_ZXXx


if [ "$1" = "$magic_arg" ] ; then
    # This runs in the new X display
    export DISPLAY=:0
    xclock -geometry 1000x1000-0+0 -bw 0 &
    xfce4-terminal --geometry=173x49+0+0 &
    exec wm2
fi



set -exo pipefail
cd $(dirname ${BASH_SOURCE[0]})
binDir="$PWD"

# killfile must be the same path as in
# hy_stopx.  killfile is set in hy_common
source "$binDir"/hy_commonx




xinitrc="${BASH_SOURCE[0]}"


##################################################
#          CONFIGURE resolution
##################################################
# These xorg.conf files need to be installed in
# /etc/X11/ then we can select which resolution
# we want to run with

config="xorg.conf.hy_2560x1600"
#config="xorg.conf.hy_1920x1200"

##################################################



function usage()
{
    cat <<EOF

  Usage: $0 [-h|--help]

  Runs X11 server display server for the Virginia Tech HyperCube.

  
                      OPTIONS

     -h|--help  print this help and exit

EOF
    exit 1
}

[ -n "$1" ] && usage



trap catcher SIGINT SIGTERM SIGQUIT

function start()
{
    if [ -e "$killfile" ] ; then

        # The user that ran this is a bad user in this case.

        # We make this user pay:
        #
        set +x
        echo "Cannot run X Server, waiting for an X Server to stop."
        echo "DIE YOU RAT" >> $killfile
        catcher
        exit
    fi

    # make a new and empty kill file any logged in user should be able to
    # remove this file.
    mkfifo -m 666 $killfile

    xinit "$xinitrc" $magic_arg -- -config $config &

    # This should block until something writes $killfile
    # See hy_stopx.
    #
    set +x
    echo "blockin on reading $killfile"
    # This read call will block until something
    # writes to the killfile
    set -x
    read line < $killfile
    set +x
    echo "read \"$line\" from: $killfile"

    catcher
 }

set -x

# We run this function in the background and then return.
#
start &

